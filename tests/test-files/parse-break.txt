================================================================================
1 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (loop
    (break)))

================================================================================
2 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (for x in "hello"
       (break)))

================================================================================
3 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (while true
    (break)))

================================================================================
4 Parse break: in while-let
================================================================================

(package coalton-unit-tests/parse-break
  (import coalton-prelude
          (coalton-library/cell as cell)
          (coalton-library/iterator as iter)))

(define (f)
  (let ((iter (iter:up-to 10)))
    (while-let
     (Some n) = (iter:next! iter)
     (break))))

================================================================================
5 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (loop :alabel (break)))

================================================================================
6 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (loop :alabel
        (break :alabel)))

================================================================================
7 Parse break
================================================================================

(package coalton-unit-tests)

(define f
  (while :somelabel true
    (break :somelabel)))

================================================================================
100 Invalid break
================================================================================

(package test-parser)

(define f (break))

--------------------------------------------------------------------------------

error: Invalid break
  --> test:3:10
   |
 3 |  (define f (break))
   |            ^^^^^^^ break does not appear in an enclosing loop

================================================================================
101 Invalid label in break
================================================================================

(package test-parser)

(define f
  (while :x True (break :y)))

--------------------------------------------------------------------------------

error: Invalid label in break
  --> test:4:24
   |
 4 |    (while :x True (break :y)))
   |                          ^^ label not found in any enclosing loop

================================================================================
102 Invalid label in break
================================================================================

(package test-parser)

(define f
  (while :x True (return (fn () (break :x)))))

--------------------------------------------------------------------------------

error: Invalid label in break
  --> test:4:39
   |
 4 |    (while :x True (return (fn () (break :x)))))
   |                                         ^^ label not found in any enclosing loop

================================================================================
103 Invalid break
================================================================================

(package test-parser)

(define f
  (while True (return (fn () (break)))))

--------------------------------------------------------------------------------

error: Invalid break
  --> test:4:29
   |
 4 |    (while True (return (fn () (break)))))
   |                               ^^^^^^^ break does not appear in an enclosing loop
