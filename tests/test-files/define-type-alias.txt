================================================================================
1 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias Index-dta1 Integer)

================================================================================
2 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryIntegerOperator (Integer -> Integer))

================================================================================
3 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias (UnaryOperator :a) (:a -> :a))

================================================================================
4 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias (ReverseTranslationRules :a :b) (:b -> :a))

================================================================================
5 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias Index-dta5 Integer)

(define-type-alias MyIndex-dta5 Index-dta5)

(define-type-alias (Collection-dta5 :a) (List :a))

(define-type-alias MyIndices-dta5 (Collection-dta5 MyIndex-dta5))

================================================================================
6 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias (U :a :b) (:b (:b :a)))

================================================================================
7 Define type alias
================================================================================

(package coalton-unit-tests)

(define-type-alias T Arrow)

================================================================================
100 define-type-alias, parse-error
================================================================================

(package test-package)

(define-type-alias "Index" UFix)

--------------------------------------------------------------------------------

error: Malformed type alias definition
  --> test:3:19
   |
 3 |  (define-type-alias "Index" UFix)
   |                     ^^^^^^^ expected symbol

================================================================================
101 define-type-alias, parse-error
================================================================================

(package test-package)

(define-type-alias Index UFix
  "An index"
  "A really good index")

--------------------------------------------------------------------------------

error: Malformed type alias definition
  --> test:5:2
   |
 5 |    "A really good index")
   |    ^^^^^^^^^^^^^^^^^^^^^ unexpected trailing form

================================================================================
102 define-type-alias, type variables
================================================================================

(package test-package)

(define-type-alias (Collection :a) (List :b))

--------------------------------------------------------------------------------

error: Unused type variable in define-type-alias
  --> test:3:31
   |
 3 |  (define-type-alias (Collection :a) (List :b))
   |                                 ^^ unused variable defined here

================================================================================
103 define-type-alias, type variables
================================================================================

(package test-package)

(define-type-alias Collection (List :b))

--------------------------------------------------------------------------------

error: Unknown type variable
  --> test:3:36
   |
 3 |  (define-type-alias Collection (List :b))
   |                                      ^^ Unknown type variable :B

================================================================================
104 define-type-alias, type variables
================================================================================

(package test-package)

(define-type-alias (Collection :a) (List Integer))

--------------------------------------------------------------------------------

error: Unused type variable in define-type-alias
  --> test:3:31
   |
 3 |  (define-type-alias (Collection :a) (List Integer))
   |                                 ^^ unused variable defined here

================================================================================
105 define-type-alias, type variables
================================================================================

(package test-package)

(define-type-alias (T :a) (List :a))
(define-type-alias U T)

--------------------------------------------------------------------------------

 error: Incomplete type alias application
  --> test:4:21
   |
 4 |  (define-type-alias U T)
   |                       ^ Type alias T is applied to 0 arguments, but 1 argument is required.
   
================================================================================
106 define-type-alias, type errors
================================================================================

(package test-package)

(define-type-alias Index UFix)

(define-type-alias MyIndex Index)

(define-type-alias (UnaryOperator :a) (:a -> :a))

(declare increment-my-index (UnaryOperator MyIndex))
(define increment-my-index (+ 1))

(declare x Integer)
(define x 5)

(define new-x (increment-my-index x))

--------------------------------------------------------------------------------

error: Type mismatch
  --> test:15:34
    |
 15 |  (define new-x (increment-my-index x))
    |                                    ^ Expected type 'UFIX' but got 'INTEGER'
