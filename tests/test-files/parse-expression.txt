================================================================================
1 Parse expression
================================================================================

(package coalton-unit-tests)

(define f-parse1 5)

================================================================================
2 Parse expression
================================================================================

(package coalton-unit-tests)

(define (f-parse2 _x) 5)

================================================================================
3 Parse expression
================================================================================

(package coalton-unit-tests)

(define (f-parse3 _x _y) 5)

================================================================================
4 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f-parse4
  (fn (x)
    (+ x x)))

================================================================================
5 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f-parse5
  (fn ()
    (+ 1 2)))

================================================================================
6 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f-parse6)
  (let ((x (the UFix 1))
        (declare y (Unit -> UFix))
        (y (fn () (+ 1 2))))
    (+ x (y))))

================================================================================
7 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f-parse7 a b c)
  (lisp Integer (a b c)
    (cl:+ a b c)))

================================================================================
8 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(declare f-parse8 ((Default :a) => (Optional :a) -> :a))
(define (f-parse8 x)
  (match x
    ((Some y) y)
    (_ (default))))

================================================================================
9 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f-parse9)
  (let x = 1)
  (let ((y (from-some "invalid y" (Some 2))))
    (+ x y)))

================================================================================
10 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f-parse10
  (the String "value"))

================================================================================
11 Parse expression
================================================================================

(package coalton-unit-tests)

(define (x--parse11) (return))

================================================================================
12 Parse expression
================================================================================

(package coalton-unit-tests)

(define (y--parse12) (return 5))

================================================================================
13 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define z-parse13 (+ 1 (+ 2 (* 3 5))))

================================================================================
14 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f-parse14)
  (progn
    (let x = 1)
    (f-parse14 x)
    (let y = 2)
    (+ x y)))

================================================================================
15 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f--parse15 x y)
  (if (== x y)
    1
    2))

================================================================================
16 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f--parse16 x y)
  (when (== x y)
    (let _z = 3)
    (print "hello"))
  (unless (== x y)
    (let _z = 4)
    (print "hello")))

================================================================================
17 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f-parse17 ax bx)
  (do
   (a <- ax)
   (b <- bx)
    (let c = (+ a b))
    (pure c)))

================================================================================
18 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define x--parse18
  (cond 
    (True 1)
    ((> 2 3) 2)))

================================================================================
19 Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define x-parse19
  (fn ((Tuple x _y)) x))

================================================================================
100 Malformed expression
================================================================================

(package test-package)

(define x ())

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x ())
   |            ^^ unexpected `nil` or `()`

================================================================================
101 Malformed expression
================================================================================

(package test-package)

(define x (f . x))

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x (f . x))
   |            ^^^^^^^ unexpected dotted list

================================================================================
102 Invalid literal
================================================================================

(package test-package)

(define x #C(1 2))

--------------------------------------------------------------------------------

error: Invalid literal
  --> test:3:10
   |
 3 |  (define x #C(1 2))
   |            ^^^^^^^ unknown literal type

================================================================================
103 Malformed expression
================================================================================

(package test-package)

(define x (f . 3))

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x (f . 3))
   |            ^^^^^^^ unexpected dotted list

================================================================================
104 Nonexhaustive match
================================================================================

(package coalton-unit-tests)

(define (g x)
  (match x))

--------------------------------------------------------------------------------

warn: non-exhaustive match
  --> test:4:2
   |
 4 |    (match x))
   |    ^^^^^^^^^ non-exhaustive match
   |    --------- missing case "_"
