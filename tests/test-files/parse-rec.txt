================================================================================
1 Parse rec
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

================================================================================
2 Parse rec
================================================================================

(package coalton-unit-tests)

(define x
  (rec list-length ((lst (make-list 1 2 3 4 5))
                    (len 0))
    (match lst
      ((Cons _ xs) (list-length xs (coalton-prelude:1+ len)))
      ((Nil) len))))

================================================================================
3 Parse nested rec
================================================================================

(package coalton-unit-tests)

(define x
  (rec even? ((n 5))
    (if (coalton-prelude:== n 0)
        True
        (rec odd? ((m (coalton-prelude:1- n)))
          (if (coalton-prelude:== m 0)
              False
              (even? (coalton-prelude:1- m)))))))

================================================================================
4 Parse rec with type declaration
================================================================================

(package coalton-unit-tests)

(define x
  (rec (f (UFix -> UFix)) ((n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

================================================================================
5 Parse rec with type alias declaration
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryUfixFunction (UFix -> UFix))

(define x
  (rec (f UnaryUfixFunction) ((n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

================================================================================
6 Parse rec without type declaration
================================================================================

(package coalton-unit-tests)

(define x
  (rec (f) ((n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

================================================================================
7 Parse rec with unexpected empty list
================================================================================

(package coalton-unit-tests)

(define x
  (rec () ((n 5)) n))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:4:7
   |
 4 |    (rec () ((n 5)) n))
   |         ^^ unexpected empty list

================================================================================
8 Parse rec with dotted list
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryUfixFunction (UFix -> UFix))

(define x
  (rec (f . UnaryUfixFunction) ((n 5)) n))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:6:12
   |
 6 |    (rec (f . UnaryUfixFunction) ((n 5)) n))
   |              ^^^^^^^^^^^^^^^^^ unexpected dotted list

================================================================================
9 Parse rec with extra arguments after type declaration
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryUfixFunction (UFix -> UFix))

(define x
  (rec (f (UFix -> UFix) g) ((n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:6:24
   |
 6 |    (rec (f (UFix -> UFix) g) ((n 5))
   |                          ^ unexpected trailing form(s)

================================================================================
10 Parse rec with type declaration
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((declare n UFix)
          (n 5))
    (if (coalton-prelude:== n 1)
        1
        (coalton-prelude:* n (f (coalton-prelude:1- n))))))

================================================================================
11 Parse rec wrong number of arguments
================================================================================

(package coalton-unit-tests)

(define x
  (rec))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:4:6
   |
 4 |    (rec))
   |        ^ expected function name

================================================================================
12 Parse rec wrong number of arguments
================================================================================

(package coalton-unit-tests)

(define x
  (rec f))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:4:8
   |
 4 |    (rec f))
   |          ^ expected binding list

================================================================================
13 Parse rec with a bad binding form
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryUfixFunction (UFix -> UFix))

(define x
  (rec (f UnaryUfixFunction) hi 0))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:6:29
   |
 6 |    (rec (f UnaryUfixFunction) hi 0))
   |                               ^^ expected binding list

================================================================================
14 Parse rec wrong number of arguments
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((x 0))))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:4:16
   |
 4 |    (rec f ((x 0))))
   |                  ^ expected rec body

================================================================================
15 Parse rec wrong number of arguments
================================================================================

(package coalton-unit-tests)

(define-type-alias UnaryUfixFunction (UFix -> UFix))

(define x
  (rec (f UnaryUfixFunction) ((x 0))))

--------------------------------------------------------------------------------

error: Malformed rec
  --> test:6:36
   |
 6 |    (rec (f UnaryUfixFunction) ((x 0))))
   |                                      ^ expected rec body

================================================================================
16 Parse rec reusing a symbol
================================================================================

(package coalton-unit-tests)

(define x
  (let ((f 3)) (rec f ((n f)) n)))

================================================================================
17 Parse rec with a bad name
================================================================================

(package coalton-unit-tests)

(define x
  (rec 1 ((x 0)) x))

--------------------------------------------------------------------------------

error: Invalid variable
  --> test:4:7
   |
 4 |    (rec 1 ((x 0)) x))
   |         ^ expected identifier

================================================================================
18 Parse rec with a bad binding name
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((1 0)) 0))

--------------------------------------------------------------------------------

error: Invalid variable
  --> test:4:11
   |
 4 |    (rec f ((1 0)) 0))
   |             ^ expected identifier

================================================================================
19 Parse rec with a bad binding form
================================================================================

(package coalton-unit-tests)

(define x
  (rec f (hi) 0))

--------------------------------------------------------------------------------

error: Malformed rec binding
  --> test:4:10
   |
 4 |    (rec f (hi) 0))
   |            ^^ expected list

================================================================================
20 Parse rec with a bad binding form
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((hi)) 0))

--------------------------------------------------------------------------------

error: Malformed rec binding
  --> test:4:13
   |
 4 |    (rec f ((hi)) 0))
   |               ^ rec bindings must have a value

================================================================================
21 Parse rec with a bad binding form
================================================================================

(package coalton-unit-tests)

(define x
  (rec f ((x y z)) 0))

--------------------------------------------------------------------------------

error: Malformed rec binding
  --> test:4:15
   |
 4 |    (rec f ((x y z)) 0))
   |                 ^ unexpected trailing form
