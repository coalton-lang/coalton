================================================================================
1 Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (loop
    (continue)))

================================================================================
2 Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (for x in "hello"
       (continue)))

================================================================================
Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (while true
    (continue)))

================================================================================
Parse continue
================================================================================

(package coalton-unit-tests/parse-continue
  (import coalton-prelude
          (coalton-library/iterator as iter)))

(define (f)
  (let ((iter (iter:up-to 10)))
    (while-let
     (Some n) = (iter:next! iter)
     (continue))))

================================================================================
Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (loop :alabel (continue)))

================================================================================
Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (loop :alabel
        (continue :alabel)))

================================================================================
Parse continue
================================================================================

(package coalton-unit-tests)

(define (f)
  (while :somelabel true
    (loop :anotherlabel
          (continue :somelabel))))

================================================================================
Invalid continue
================================================================================

(package test-parser)

(define f (continue))

--------------------------------------------------------------------------------

error: Invalid continue
  --> test:3:10
   |
 3 |  (define f (continue))
   |            ^^^^^^^^^^ continue does not appear in an enclosing loop

================================================================================
Invalid argument in continue
================================================================================

(package test-parser)

(define f
  (loop :foo        
    (continue notakeyword)))

--------------------------------------------------------------------------------

error: Invalid argument in continue
  --> test:5:4
   |
 5 |      (continue notakeyword)))
   |      ^^^^^^^^^^^^^^^^^^^^^^ expected a keyword

================================================================================
Invalid label in continue
================================================================================

(package test-parser)

(define f
  (loop :foo        
    (continue :not-foo)))

--------------------------------------------------------------------------------

error: Invalid label in continue
  --> test:5:14
   |
 5 |      (continue :not-foo)))
   |                ^^^^^^^^ label not found in any enclosing loop

================================================================================
Invalid continue
================================================================================

(package test-parser)

(define f
  (loop
    (let ((continuer (fn () (continue))))
      (continuer))))

--------------------------------------------------------------------------------

error: Invalid continue
  --> test:5:28
   |
 5 |      (let ((continuer (fn () (continue))))
   |                              ^^^^^^^^^^ continue does not appear in an enclosing loop

================================================================================
Invalid label in continue
================================================================================

(package test-parser)

(define f
  (loop :blech
        (let ((continuer (fn () (continue :blech))))
          (continuer))))


--------------------------------------------------------------------------------

error: Invalid label in continue
  --> test:5:42
   |
 5 |          (let ((continuer (fn () (continue :blech))))
   |                                            ^^^^^^ label not found in any enclosing loop
