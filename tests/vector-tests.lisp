(cl:in-package #:coalton-native-tests)

(define-test test-vector-constructor-equivalencies ()
  (let vec = (vector:with-capacity 10))
  (iter:for-each! (fn (x)
                    (vector:push! x vec)
                    Unit)
                  (iter:up-to 10))
  (is (== (vector:make 0 1 2 3 4 5 6 7 8 9)
          vec))
  (is (== (iter:collect! (iter:up-to 10))
          vec)))

(define-test test-vector-specialize-element-type ()
  (is (== (vector:element-type (the (Vector (Optional Integer)) (vector:new)))
          (lisp types:LispType () 'cl:t)))
  (is (== (vector:element-type (the (Vector IFix) (vector:new)))
          (lisp types:LispType () 'cl:fixnum)))
  (is (== (vector:element-type (the (Vector String) (vector:new)))
          (lisp types:LispType () 'cl:t)))
  (is (== (vector:element-type (the (Vector Char) (vector:new)))
          (lisp types:LispType () 'cl:character))))

(define-test test-vector-initial-element ()
  (== (vector:make "x" "x" "x") (vector:with-initial-element 3 "x")))
