================================================================================
Parse expression
================================================================================

(package coalton-unit-tests)

(define f 5)

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests)

(define (f _x) 5)

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests)

(define (f _x _y) 5)

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f
  (fn (x)
    (+ x x)))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f
  (fn ()
    (+ 1 2)))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f)
  (let ((x 1)
        (declare y (T -> T))
        (y (+ 1 2)))
    (f x y)))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f a b c)
  (lisp (Integer -> Integer) (a b c)
    (cl:+ 1 2)))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f x)
  (match x
    ((Some (Some x)) x)
    ((Some x) x)
    (y 1)
    (1 z)
    (_ 2)))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests)

(define (g x)
  (match x))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f)
  (let x = 1)
  (let (Some y) = 2)
  (+ x y))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define f
  (the String "value"))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests)

(define (x) (return))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests)

(define (y) (return 5))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define z (+ 1 (+ 2 (* 3 5))))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f)
  (progn
    (let x = 1)
    (f x)
    (let y = 2)
    (+ x y)))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f x y)
  (if (== x y)
    1
    2))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define (f x y)
  (when (== x y)
    (let z = 3)
    (print "hello"))
  (unless (== x y)
    (let z = 4)
    (print "hello")))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests)

(define x (and 1 2 3))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests)

(define y (or 1 2))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests)

(define (x mx)
  (do
    (x <- mx)
    (let y = 5)
    (z 1 2 3)
    z
    (z)
    (z x)
    (x (y) z)))

================================================================================
Parse expression (:disable)
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define x
  (cond
    (1 1)
    ((+ 1 2) 3)))

================================================================================
Parse expression
================================================================================

(package coalton-unit-tests/prelude
  (import coalton-prelude))

(define x
  (fn ((Tuple x _y)) x))

================================================================================
Malformed expression
================================================================================

(package test-package)

(define x ())

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x ())
   |            ^^ unexpected `nil` or `()`

================================================================================
Malformed expression
================================================================================

(package test-package)

(define x (f . x))

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x (f . x))
   |            ^^^^^^^ unexpected dotted list

================================================================================
Invalid literal
================================================================================

(package test-package)

(define x #C(1 2))

--------------------------------------------------------------------------------

error: Invalid literal
  --> test:3:10
   |
 3 |  (define x #C(1 2))
   |            ^^^^^^^ unknown literal type

================================================================================
Malformed expression
================================================================================

(package test-package)

(define x (f . 3))

--------------------------------------------------------------------------------

error: Malformed expression
  --> test:3:10
   |
 3 |  (define x (f . 3))
   |            ^^^^^^^ unexpected dotted list
