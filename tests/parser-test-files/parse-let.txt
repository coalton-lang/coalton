================================================================================
Parse let
================================================================================

(package coalton-unit-tests)

(define x
  (let ((y 5))
    y))

================================================================================
Parse let
================================================================================

(package coalton-unit-tests)

(define x
  (let ()
    5))

================================================================================
Malformed let
================================================================================

(package test-package)

(define f (let))

--------------------------------------------------------------------------------

error: Malformed let
  --> test:3:15
   |
 3 |  (define f (let))
   |                ^ expected let binding list

================================================================================
Malformed let
================================================================================

(package test-package)

(define f (let ()))

--------------------------------------------------------------------------------

error: Malformed let
  --> test:3:18
   |
 3 |  (define f (let ()))
   |                   ^ expected let body

================================================================================
Malformed let
================================================================================

(package test-package)

(define f (let x 5))

--------------------------------------------------------------------------------

error: Malformed let
  --> test:3:15
   |
 3 |  (define f (let x 5))
   |                 ^ expected binding list

================================================================================
Malformed let binding
================================================================================

(package test-package)

(define x
  (let ((y 2 . 3))
   (* 2 y)))

--------------------------------------------------------------------------------

error: Malformed let binding
  --> test:4:8
   |
 4 |    (let ((y 2 . 3))
   |          ^^^^^^^^^ unexpected dotted list

================================================================================
Malformed let binding
================================================================================

(package test-package)

(define f
 (let ((x)) 5))

--------------------------------------------------------------------------------

error: Malformed let binding
  --> test:4:10
   |
 4 |   (let ((x)) 5))
   |           ^ let bindings must have a value

================================================================================
Malformed let binding
================================================================================

(package test-package)

(define f
  (let (x) 5))

--------------------------------------------------------------------------------

error: Malformed let binding
  --> test:4:8
   |
 4 |    (let (x) 5))
   |          ^ expected list

================================================================================
Malformed let binding
================================================================================

(package test-package)

(define f
  (let ((x y z)) 5))

--------------------------------------------------------------------------------

error: Malformed let binding
  --> test:4:13
   |
 4 |    (let ((x y z)) 5))
   |               ^ unexpected trailing form

================================================================================
Malformed declare
================================================================================

(package test-package)

(define x
  (let ((declare x (T -> T) 5))
   "x"))

--------------------------------------------------------------------------------

error: Malformed declare
  --> test:4:28
   |
 4 |    (let ((declare x (T -> T) 5))
   |                              ^ unexpected form

================================================================================
Invalid variable
================================================================================

(package test-package)

(define x
  (let ((declare 5 (T -> T)))
   "x"))

--------------------------------------------------------------------------------

error: Invalid variable
  --> test:4:17
   |
 4 |    (let ((declare 5 (T -> T)))
   |                   ^ expected identifier
