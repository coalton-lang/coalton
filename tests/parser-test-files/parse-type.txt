================================================================================
1 Parse type (:disable)
================================================================================

(package coalton-unit-tests)

(declare f (T))
(define (f)
  1)

(declare g (T :a))
(declare h (T :a :b :c))
(declare j (T -> T))
(declare k (T :a -> T :b -> T :c))
(declare l (T (:a -> :b) -> T :d))

(declare m (T :a => T))
(declare n ((T :a) => T))
(declare o ((T :a) (T :b) => T)) 

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (T -> (G)))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:17
   |
 3 |  (declare f (T -> (G)))
   |                   ^^^ unexpected nullary type

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (=> T -> T))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:12
   |
 3 |  (declare f (=> T -> T))
   |              ^^ unnecessary `=>`
help: remove `=>`
 3 | (declare f (T -> T))
   |            --------

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (T :a =>))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:14
   |
 3 |  (declare f (T :a =>))
   |                ^^ missing type after `=>`

================================================================================
Malformed type predicate
================================================================================

(package test-package)

(declare f (T => T -> T))

--------------------------------------------------------------------------------

error: Malformed type predicate
  --> test:3:12
   |
 3 |  (declare f (T => T -> T))
   |              ^ expected predicate

================================================================================
Malformed type predicate
================================================================================

(package test-package)

(declare f ("T" :a => T))

--------------------------------------------------------------------------------

error: Malformed type predicate
  --> test:3:12
   |
 3 |  (declare f ("T" :a => T))
   |              ^^^ expected identifier

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (=>))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:12
   |
 3 |  (declare f (=>))
   |              ^^ unnecessary `=>`

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (=> T -> T))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:12
   |
 3 |  (declare f (=> T -> T))
   |              ^^ unnecessary `=>`
help: remove `=>`
 3 | (declare f (T -> T))
   |            --------

================================================================================
Malformed type predicate
================================================================================

(package test-package)

(declare f ((T :a) T => T -> T))

--------------------------------------------------------------------------------

error: Malformed type predicate
  --> test:3:19
   |
 3 |  (declare f ((T :a) T => T -> T))
   |                     ^ expected predicate

================================================================================
Malformed type predicate
================================================================================

(package test-package)

(declare f ((T :a) ((T) :a) => T -> T))

--------------------------------------------------------------------------------

error: Malformed type predicate
  --> test:3:20
   |
 3 |  (declare f ((T :a) ((T) :a) => T -> T))
   |                      ^^^ expected class name
help: remove parentheses
 3 | (declare f ((T :a) (T :a) => T -> T))
   |                     -

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (T -> "T"))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:17
   |
 3 |  (declare f (T -> "T"))
   |                   ^^^ expected identifier

================================================================================
Malformed function type
================================================================================

(package test-package)

(declare f (-> T))

--------------------------------------------------------------------------------

error: Malformed function type
  --> test:3:12
   |
 3 |  (declare f (-> T))
   |              ^^ invalid function syntax

================================================================================
Malformed function type
================================================================================

(package test-package)

(declare f (T ->))

--------------------------------------------------------------------------------

error: Malformed function type
  --> test:3:14
   |
 3 |  (declare f (T ->))
   |                ^^ missing return type

================================================================================
Malformed type
================================================================================

(package test-package)

(declare f (=> T))

--------------------------------------------------------------------------------

error: Malformed type
  --> test:3:12
   |
 3 |  (declare f (=> T))
   |              ^^ unnecessary `=>`
help: remove `=>`
 3 | (declare f T)
   |            -
