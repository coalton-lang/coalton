(in-package #:coalton-native-tests)

(define-test ordmap-test ()
  (is (== (ordmap:lookup (the (ordmap:OrdMap Integer String) ordmap:empty) 0)
          None))

  (is (== (do (t <- (ordmap:insert ordmap:empty 0 "Zero"))
                   (ordmap:lookup t 0))
          (Some "Zero")))

  ;;insert returns None if elt is already in it.
  (is (== (do (t <- (ordmap:insert ordmap:empty 0 "Zero"))
              (ordmap:insert t 0 "Null"))
          None))

  (let ((src (the (ordmap:OrdMap Integer String)
                  (iter:collect!
                   (iter:into-iter
                    (make-list (Tuple 0 "Zero")
                               (Tuple 1 "One")
                               (Tuple 2 "Two"))))))
        (a (ordmap:remove src 1))
        (b (ordmap:remove src 3)))
    (is (== (match a
              ((None) Nil)
              ((Some t) (make-list (ordmap:lookup t 0)
                                   (ordmap:lookup t 1)
                                   (ordmap:lookup t 2))))
            (make-list (Some "Zero") None (Some "Two"))))
    (is (== b None))
    (is (== (match (do (a <- (ordmap:remove src 1))
                       (a <- (ordmap:remove a 2))
                     (ordmap:insert a 1 "Eins"))
              ((None) Nil)
              ((Some t) (make-list (ordmap:lookup t 0)
                                   (ordmap:lookup t 1)
                                   (ordmap:lookup t 2))))
            (make-list (Some "Zero") (Some "Eins") None))))

  (let ((src (the (ordmap:OrdMap Integer String)
                  (iter:collect!
                   (iter:into-iter
                    (make-list (Tuple 1 "One")
                               (Tuple 2 "Two")
                               (Tuple 3 "Three")
                               (Tuple 4 "Four")
                               (Tuple 5 "Five")
                               (Tuple 6 "Six")
                               (Tuple 7 "Seven")))))))
    (is (== (match (do (a <- (Some src))
                       (a <- (ordmap:insert a 10 "Zehn"))
                       (a <- (ordmap:remove a 3))
                       (a <- (ordmap:remove a 7))
                       (a <- (ordmap:insert a 8 "Acht"))
                       (a <- (ordmap:remove a 1))
                       (a <- (ordmap:remove a 10))
                       (a <- (ordmap:insert a 7 "Sieben"))
                     (ordmap:remove a 5))
              ((None) Nil)
              ((Some t) (iter:collect! (iter:into-iter t))))
            (make-list (Tuple 2 "Two")
                       (Tuple 4 "Four")
                       (Tuple 6 "Six")
                       (Tuple 7 "Sieben")
                       (Tuple 8 "Acht")))))

  (let ((src (the (ordmap:OrdMap Integer String)
                  (iter:collect!
                   (iter:into-iter
                    (make-list (Tuple 1 "One")
                               (Tuple 2 "Two")
                               (Tuple 3 "Three")
                               (Tuple 4 "Four")
                               (Tuple 5 "Five")
                               (Tuple 6 "Six")
                               (Tuple 7 "Seven")))))))
    (is (== (ordmap:max-key-entry src)
            (Some (Tuple 7 "Seven"))))
    (is (== (ordmap:min-key-entry src)
            (Some (Tuple 1 "One")))))

  (is (== (do (a <- (ordmap:insert ordmap:empty 1 "One"))
              (ordmap:max-key-entry a))
          (Some (Tuple 1 "One"))))
  (is (== (do (a <- (ordmap:insert ordmap:empty 1 "One"))
              (ordmap:min-key-entry a))
          (Some (Tuple 1 "One"))))
  (is (== (ordmap:max-key-entry (the (ordmap:OrdMap Integer String)
                                     ordmap:empty))
          None))
  (is (== (ordmap:min-key-entry (the (ordmap:OrdMap Integer String)
                                     ordmap:empty))
          None))

  (let ((src (the (ordmap:OrdMap Integer String)
                  (iter:collect!
                   (iter:into-iter
                    (make-list (Tuple 1 "One")
                               (Tuple 3 "Three")
                               (Tuple 5 "Five")
                               (Tuple 7 "Seven")
                               (Tuple 9 "Nine")))))))
    (is (== (ordmap:lookup-neighbors src 0)
            (Tuple3 None None (Some (Tuple 1 "One")))))
    (is (== (ordmap:lookup-neighbors src 1)
            (Tuple3 None (Some (Tuple 1 "One")) (Some (Tuple 3 "Three")))))
    (is (== (ordmap:lookup-neighbors src 2)
            (Tuple3 (Some (Tuple 1 "One")) None (Some (Tuple 3 "Three")))))
    (is (== (ordmap:lookup-neighbors src 3)
            (Tuple3 (Some (Tuple 1 "One")) (Some (Tuple 3 "Three")) (Some (Tuple 5 "Five")))))
    (is (== (ordmap:lookup-neighbors src 4)
            (Tuple3 (Some (Tuple 3 "Three")) None (Some (Tuple 5 "Five")))))
    (is (== (ordmap:lookup-neighbors src 5)
            (Tuple3 (Some (Tuple 3 "Three")) (Some (Tuple 5 "Five")) (Some (Tuple 7 "Seven")))))
    (is (== (ordmap:lookup-neighbors src 6)
            (Tuple3 (Some (Tuple 5 "Five")) None (Some (Tuple 7 "Seven")))))
    (is (== (ordmap:lookup-neighbors src 7)
            (Tuple3 (Some (Tuple 5 "Five")) (Some (Tuple 7 "Seven")) (Some (Tuple 9 "Nine")))))
    (is (== (ordmap:lookup-neighbors src 8)
            (Tuple3 (Some (Tuple 7 "Seven")) None (Some (Tuple 9 "Nine")))))
    (is (== (ordmap:lookup-neighbors src 9)
            (Tuple3 (Some (Tuple 7 "Seven")) (Some (Tuple 9 "Nine")) None)))
    (is (== (ordmap:lookup-neighbors src 10)
            (Tuple3 (Some (Tuple 9 "Nine")) None None))))

  ;; edge cases
  (is (== (ordmap:lookup-neighbors (the (ordmap:OrdMap Integer String)
                                        ordmap:Empty)
                                   1)
          (Tuple3 None None None)))
  (is (== (do (a <- (ordmap:insert ordmap:Empty 1 "One"))
              (Some (ordmap:lookup-neighbors a 1)))
          (Some (Tuple3 None (Some (Tuple 1 "One")) None))))
  )
