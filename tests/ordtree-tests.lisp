(in-package #:coalton-native-tests)

(define-test ordtree-test ()
  (is (== (ordtree:lookup ordtree:Empty 0) None))

  (is (== (match (ordtree:insert ordtree:Empty 0)
            ((None) None)
            ((Some t) (ordtree:lookup t 0)))
          (Some 0)))

  ;; insert returns None if elt is already in it.
  (is (== (ordtree:insert (ordtree:make 1 2 3) 1)
          None))

  (let ((a (ordtree:remove (ordtree:make 1 2 3) 2)))
    (is (== (match a
              ((None) Nil)
              ((Some t) (make-list (ordtree:lookup t 1)
                                   (ordtree:lookup t 2)
                                   (ordtree:lookup t 3))))
            (make-list (Some 1) None (Some 3)))))

  (let ((a (ordtree:remove (ordtree:make 1 2 3) 4)))
    (is (== (match a
              ((None) Nil)
              ((Some t) (make-list (ordtree:lookup t 1)
                                   (ordtree:lookup t 2)
                                   (ordtree:lookup t 3))))
            Nil)))

  (is (== (match (do (a <- (Some (ordtree:make 1 2 3)))
                     (a <- (ordtree:remove a 1))
                     (a <- (ordtree:remove a 3))
                   (ordtree:insert a 1))
              ((None) Nil)
              ((Some t) (make-list (ordtree:lookup t 1)
                                   (ordtree:lookup t 2)
                                   (ordtree:lookup t 3))))
          (make-list (Some 1) (Some 2) None)))

  (is (== (match (do (a <- (Some (ordtree:make 1 2 3 4 5 6 7 8 9)))
                     (a <- (ordtree:insert a 10))
                     (a <- (ordtree:remove a 3))
                     (a <- (ordtree:remove a 7))
                     (a <- (ordtree:insert a 0))
                     (a <- (ordtree:remove a 10))
                   (ordtree:insert a 7))
            ((None) Nil)
            ((Some t) (iter:collect! (iter:into-iter t))))
          (make-list 0 1 2 4 5 6 7 8 9)))

  (is (== (ordtree:max-element (ordtree:make 1 2 3 4 5 6 7 8 9))
          (Some 9)))
  (is (== (ordtree:min-element (ordtree:make 1 2 3 4 5 6 7 8 9))
          (Some 1)))
  (is (== (ordtree:max-element (ordtree:make 1))
          (Some 1)))
  (is (== (ordtree:min-element (ordtree:make 1))
          (Some 1)))
  (is (== (ordtree:max-element (the (ordtree:Tree Integer) ordtree:Empty))
          None))
  (is (== (ordtree:min-element (the (ordtree:Tree Integer) ordtree:Empty))
          None))

  (let ((t (ordtree:make 1 3 5 7 9)))
    (is (== (ordtree:lookup-neighbors t 0)
            (Tuple3 None None (Some 1))))
    (is (== (ordtree:lookup-neighbors t 1)
            (Tuple3 None (Some 1) (Some 3))))
    (is (== (ordtree:lookup-neighbors t 2)
            (Tuple3 (Some 1) None (Some 3))))
    (is (== (ordtree:lookup-neighbors t 3)
            (Tuple3 (Some 1) (Some 3) (Some 5))))
    (is (== (ordtree:lookup-neighbors t 4)
            (Tuple3 (Some 3) None (Some 5))))
    (is (== (ordtree:lookup-neighbors t 5)
            (Tuple3 (Some 3) (Some 5) (Some 7))))
    (is (== (ordtree:lookup-neighbors t 6)
            (Tuple3 (Some 5) None (Some 7))))
    (is (== (ordtree:lookup-neighbors t 7)
            (Tuple3 (Some 5) (Some 7) (Some 9))))
    (is (== (ordtree:lookup-neighbors t 8)
            (Tuple3 (Some 7) None (Some 9))))
    (is (== (ordtree:lookup-neighbors t 9)
            (Tuple3 (Some 7) (Some 9) None)))
    (is (== (ordtree:lookup-neighbors t 10)
            (Tuple3 (Some 9) None None))))

  ;; edge cases
  (is (== (ordtree:lookup-neighbors ordtree:Empty 1)
          (Tuple3 None None None)))
  (is (== (ordtree:lookup-neighbors (ordtree:make 1) 1)
          (Tuple3 None (Some 1) None))))
